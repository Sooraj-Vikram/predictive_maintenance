#include <WiFi.h>
#include <Firebase_ESP_Client.h>
ESP 32 CODE

#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_ADXL345_U.h>
#include <math.h>
#include <OneWire.h>
#include <DallasTemperature.h>

// WiFi credentials
#define WIFI_SSID "No signal"
#define WIFI_PASSWORD "friendbii"

// Firebase setup
FirebaseData firebaseData;
FirebaseJson json;
FirebaseAuth auth;
FirebaseConfig config;

// Sensor pins
#define ONE_WIRE_BUS 4 // DS18B20
#define ACS_PIN 34     // Current sensor
int motorA1 = 14;      // Output pin for motor/LED

// ADXL345 Accelerometer
Adafruit_ADXL345_Unified accel = Adafruit_ADXL345_Unified(12345);

// OneWire and Temperature Sensor
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);

void setup() {
  Serial.begin(115200);
  pinMode(motorA1, OUTPUT);
  digitalWrite(motorA1, HIGH);

  // Connect to Wi-Fi
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  Serial.println("\nConnected to WiFi");

  // Firebase configuration
  config.host = "predictive-maintenance-ee697-default-rtdb.asia-southeast1.firebasedatabase.app";
  config.signer.tokens.legacy_token = "AIzaSyCZdPNeOyjsW9qjKrDLabWSCwFBg-b5NxA";

  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);
  Serial.println("Firebase Initialized");

  // Initialize ADXL345
  if (!accel.begin()) {
    Serial.println("No ADXL345 detected ... Check wiring!");
    while (1);
  }
  accel.setRange(ADXL345_RANGE_16_G);
  
  sensors.begin();
  analogReadResolution(12);  // For ESP32

  Serial.println("System Ready");
}

void loop() {
  // --- SENSOR DATA COLLECTION ---
  sensors_event_t event;
  accel.getEvent(&event);
  float vibration = sqrt(pow(event.acceleration.x, 2) +
                         pow(event.acceleration.y, 2) +
                         pow(event.acceleration.z, 2)) - 9.3;

  sensors.requestTemperatures();
  float temperatureC = sensors.getTempCByIndex(0);

  float AcsValue = 0.0, Samples = 0.0;
  for (int x = 0; x < 300; x++) {
    AcsValue = analogRead(ACS_PIN);
    Samples += AcsValue;
    delay(1);
  }
  float AvgAcs = Samples / 300.0;
  float AcsValueF = (((AvgAcs * (3.3 / 4095.0)) - 1.63) / 0.185) - 2.24;

  Serial.print("Vibration: "); Serial.print(vibration);
  Serial.print(" | Temperature: "); Serial.print(temperatureC);
  Serial.print(" | Current: "); Serial.println(AcsValueF);

  // --- UPLOAD SENSOR DATA TO FIREBASE ---
  json.set("Vibration", vibration);
  json.set("Current", AcsValueF);
  json.set("Temperature", temperatureC);

  if (Firebase.RTDB.setJSON(&firebaseData, "/Sensor", &json)) {
    Serial.println("Sensor Data updated successfully");
  } else {
    Serial.println("Sensor Data update failed: " + firebaseData.errorReason());
  }

  // --- CHECK FOR PREDICTED FAULT FROM FIREBASE ---
  if (Firebase.RTDB.getInt(&firebaseData, "/Prediction/Fault")) {
    if (firebaseData.dataType() == "int") {
      int faultValue = firebaseData.intData();
      Serial.println("Fault Value: " + String(faultValue));

      if (faultValue == 1) {
        digitalWrite(motorA1, LOW);
        Serial.println("⚠ Fault: Motor OFF");
      } else {
        Serial.println("✅ No Fault");
      }
    }
  } else {
    Serial.println("Failed to get Fault data: " + firebaseData.errorReason());
  }

  // --- NEW: CHECK motor_condition AND CONTROL OUTPUT ---
  if (Firebase.RTDB.getString(&firebaseData, "/motor_condition")) {
    String motorStatus = firebaseData.stringData();
    Serial.println("motor_condition: " + motorStatus);

    if (motorStatus == "ON") {
      digitalWrite(motorA1, HIGH);
      Serial.println("motorA1 set to HIGH");
    } else if (motorStatus == "OFF") {
      digitalWrite(motorA1, LOW);
      Serial.println("motorA1 set to LOW");
    }
  } else {
    Serial.println("Failed to read /motor_condition: " + firebaseData.errorReason());
  }

  delay(2000);  // Delay before next loop
}

--------------------------------------------------------------------------------------------------
Website Code
--------------------------------------------------------------------------------------------------
index.html code


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Predictive Maintenance</title>
  <script src="https://cdn.plot.ly/plotly-2.24.1.min.js"></script>
  <script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/10.1.0/firebase-app.js";
    import { getDatabase, ref, onValue } from "https://www.gstatic.com/firebasejs/10.1.0/firebase-database.js";

    const firebaseConfig = {
      apiKey: "AIzaSyCZdPNeOyjsW9qjKrDLabWSCwFBg-b5NxA",
      authDomain: "predictive-maintenance-ee697.firebaseapp.com",
      databaseURL: "https://predictive-maintenance-ee697-default-rtdb.asia-southeast1.firebasedatabase.app",
      projectId: "predictive-maintenance-ee697",
      storageBucket: "predictive-maintenance-ee697.firebasestorage.app",
      messagingSenderId: "905376142266",
      appId: "1:905376142266:web:dc081d8bb7d6bab62e4383",
      measurementId: "G-B57LTZHVZ4"
    };

    const app = initializeApp(firebaseConfig);
    const database = getDatabase(app);

    let timeData = [], currentData = [], vibrationData = [], temperatureData = [];

    function updateGraphs() {
      const layout = {
        paper_bgcolor: '#111',
        plot_bgcolor: '#111',
        font: { color: '#0f0' },
        margin: { t: 30, l: 40, r: 30, b: 40 },
        xaxis: { gridcolor: '#222', tickfont: { color: '#0f0' }},
        yaxis: { gridcolor: '#222', tickfont: { color: '#0f0' }}
      };

      const trace = (yData, name) => ({
        x: timeData,
        y: yData,
        mode: 'lines+markers',
        name: name,
        line: { color: '#0f0' },
        marker: { color: '#0f0', size: 5 }
      });

      Plotly.newPlot('graph1', [trace(currentData, 'Current')], { ...layout, title: 'Current' });
      Plotly.newPlot('graph2', [trace(vibrationData, 'Vibration')], { ...layout, title: 'Vibration' });
      Plotly.newPlot('graph3', [trace(temperatureData, 'Temperature')], { ...layout, title: 'Temperature' });
    }

    function updateDashboard(data) {
  const current = data.Sensor.Current.toFixed(3);
  const temperature = data.Sensor.Temperature.toFixed(2);
  const vibration = data.Sensor.Vibration.toFixed(2);

  document.getElementById('current-val').textContent = `${current} A`;
  document.getElementById('temperature-val').textContent = `${temperature} °C`;
  document.getElementById('vibration-val').textContent = vibration;

  const predictionBox = document.getElementById('prediction-box');
  const faultTypeBox = document.getElementById('fault-type');

  if (data.Prediction.Fault === 1) {
    predictionBox.innerHTML = `<i data-lucide="alert-circle"></i> ⚠ Fault Detected!`;
    predictionBox.classList.add("fault-active");
    faultTypeBox.innerHTML = `<i data-lucide="alert-triangle"></i> Fault Type: <strong>${data.FaultName.Name}</strong>`;
  } else {
    predictionBox.innerHTML = `<i data-lucide="check-circle"></i> No Fault`;
    predictionBox.classList.remove("fault-active");
    predictionBox.style.backgroundColor = "#d5fcdc";
    faultTypeBox.innerHTML = `<i data-lucide="activity"></i> Operational Status : <strong>Good</strong>`;
  }

  // Refresh icons inside dynamic HTML
  lucide.createIcons();
}



    onValue(ref(database, '/'), (snapshot) => {
      const data = snapshot.val();
      if (data && data.Sensor && data.Prediction && data.FaultName) {
        const timestamp = new Date().toLocaleTimeString();
        timeData.push(timestamp);
        currentData.push(data.Sensor.Current || 0);
        vibrationData.push(data.Sensor.Vibration || 0);
        temperatureData.push(data.Sensor.Temperature || 0);
        if (timeData.length > 20) {
          timeData.shift(); currentData.shift(); vibrationData.shift(); temperatureData.shift();
        }
        updateGraphs();
        updateDashboard(data);
      }
    });

    window.togglePage = function () {
      window.location.href = 'toggle.html';
    };
  </script>

  <!-- 🔗 Lucide Icons -->
  <script src="https://unpkg.com/lucide@latest"></script>

  <style>
    body {
      margin: 0;
      font-family: 'Segoe UI', sans-serif;
      background-color: #f5f5f5;
    }
    @keyframes pulse {
  0% {
    background-color: #ff4c4c;
    box-shadow: 0 0 10px #ff4c4c;
  }
  50% {
    background-color: #ff9999;
    box-shadow: 0 0 20px #ff9999;
  }
  100% {
    background-color: #ff4c4c;
    box-shadow: 0 0 10px #ff4c4c;
  }
}

.fault-active {
  animation: pulse 1s infinite;
  color: white;
}

    h1 {
      text-align: center;
      padding: 20px;
      background: #fcd5ff;
      color: #111;
      margin: 0;
      position: relative;
    }

    .menu-icon {
      position: absolute;
      left: 20px;
      top: 20px;
      cursor: pointer;
      font-size: 24px;
      background-color: #fff;
      border-radius: 6px;
      padding: 6px 10px;
      box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
    }

    .dashboard {
      display: flex;
      height: calc(100vh - 80px);
    }

    .left-panel {
      width: 60%;
      padding: 10px;
      background: #e5d9fc;
      border-radius: 30px;
      margin: 20px;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
    }

    .graph {
      flex: 1;
      margin-bottom: 20px;
      border-radius: 20px;
      overflow: hidden;
      box-shadow: 0 0 10px rgba(0, 255, 0, 0.2);
    }

    .right-panel {
      width: 40%;
      margin: 20px 20px 20px 0;
      display: flex;
      flex-direction: column;
      align-items: center;
    }

    .grid-panel {
      display: flex;
      flex-wrap: wrap;
      justify-content: space-between;
      width: 90%;
      gap: 15px;
    }

    .grid-box {
      flex: 1 1 45%;
      background-color: #eaf6ff;
      padding: 20px;
      border-radius: 20px;
      text-align: center;
      font-size: 18px;
      font-weight: bold;
      box-shadow: 0 0 6px rgba(0, 0, 0, 0.1);
    }

    .grid-box.wide {
      flex-basis: 100%;
      background-color: #fcffe5;
    }

    .grid-box i {
      display: block;
      margin: 0 auto 10px;
      color: #0077cc;
      width: 24px;
      height: 24px;
    }

    .status-box {
      background-color: #dfffe0;
      font-size: 20px;
      font-weight: bold;
      padding: 20px;
      border-radius: 25px;
      text-align: center;
      width: 90%;
      margin-top: 15px;
      box-shadow: 0 0 8px rgba(0, 0, 0, 0.05);
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 10px;
    }

    .status-box i {
      width: 24px;
      height: 24px;
    }
  </style>
</head>

<body>
  <h1>
    <span class="menu-icon" onclick="togglePage()">☰</span>
    Predictive Maintenance
  </h1>

  <div class="dashboard">
    <div class="left-panel">
      <div id="graph1" class="graph"></div>
      <div id="graph2" class="graph"></div>
      <div id="graph3" class="graph"></div>
    </div>

    <div class="right-panel">
      <div class="grid-panel">
        <div class="grid-box" id="current-box">
          <i data-lucide="zap"></i>
          Current<br><span id="current-val">-- A</span>
        </div>
        <div class="grid-box" id="temperature-box">
          <i data-lucide="thermometer-sun"></i>
          Temperature<br><span id="temperature-val">-- °C</span>
        </div>
        <div class="grid-box wide" id="vibration-box">
          <i data-lucide="activity-square"></i>
          Vibration<br><span id="vibration-val">--</span>
        </div>
      </div>

      <div class="status-box" id="prediction-box">
        <i data-lucide="check-circle"></i> No Fault
      </div>
      <div class="status-box" id="fault-type">
        <i data-lucide="activity"></i> Operational Status: <strong>--</strong>
      </div>
    </div>
  </div>

  <script>
    lucide.createIcons();
  </script>
</body>
</html>
--------------------------------------------------------------------------------------------------
toggle.html code

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Toggle Motor</title>
  <style>
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      margin: 0;
      background: #fff;
    }

    .header {
      text-align: center;
      padding: 10px;
      font-size: 20px;
      background-color: #ffc8fc;
      border-radius: 20px;
      margin: 10px auto;
      max-width: 400px;
    }

    .container {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 90vh;
    }

    .card {
      background: white;
      padding: 30px 40px;
      border-radius: 25px;
      box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
      text-align: center;
      position: relative;
    }

    .motor-label {
      font-size: 26px;
      font-weight: 500;
    }

    .motor-state {
      font-size: 60px;
      font-weight: bold;
      margin: 20px 0;
    }

    .fault-box {
      font-size: 20px;
      padding: 10px;
      margin-top: 20px;
      border-radius: 10px;
      background-color: #e0d5ff;
    }

    .switch {
      width: 120px;
      height: 50px;
      background: #aaff33;
      border-radius: 999px;
      display: flex;
      align-items: center;
      padding: 5px;
      margin: 0 auto;
      cursor: pointer;
    }

    .switch-circle {
      height: 40px;
      width: 40px;
      background: #d0d0d0;
      border-radius: 50%;
      margin-left: auto;
      transition: all 0.3s ease;
    }

    .switch.off {
      background: #ccc;
    }

    .switch.off .switch-circle {
      margin-left: 0;
    }

    .menu-btn {
      position: absolute;
      top: 10px;
      left: 10px;
      font-size: 28px;
      background: none;
      border: none;
      cursor: pointer;
      z-index: 10;
      padding: 8px;
      border-radius: 10px;
      transition: background-color 0.3s;
    }

    .menu-btn:hover {
      background-color: #eee;
    }
  </style>
</head>
<body>
  <button id="back-btn" class="menu-btn">↩</button>
  <div class="header">Motor Control</div>

  <div class="container">
    <div class="card">
      <div class="motor-label">Motor<br>Condition</div>
      <div class="motor-state">ON</div>
      <div class="switch" id="motor-switch">
        <div class="switch-circle"></div>
      </div>
      <div class="fault-box" id="fault-box">Fault Status: No Fault</div>
    </div>
  </div>

  <script>
    const backBtn = document.getElementById('back-btn');
    const motorStateText = document.querySelector('.motor-state');
    const motorSwitch = document.getElementById('motor-switch');
    const faultBox = document.getElementById('fault-box');

    let motorState = true;

    function updateFirebase(state) {
      const firebaseUrl = 'https://predictive-maintenance-ee697-default-rtdb.asia-southeast1.firebasedatabase.app/motor_condition.json';
      fetch(firebaseUrl, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(state ? "ON" : "OFF")
      })
      .then(response => response.json())
      .then(data => console.log('Motor state updated:', data))
      .catch(error => console.error('Error:', error));
    }

    function getFaultStatus() {
      const faultUrl = 'https://predictive-maintenance-ee697-default-rtdb.asia-southeast1.firebasedatabase.app/Prediction/Fault.json';
      fetch(faultUrl)
        .then(response => response.json())
        .then(data => {
          if (data === 1) {
            faultBox.textContent = 'Fault Status: Fault Detected';
            faultBox.style.backgroundColor = '#ff4c4c';
          } else {
            faultBox.textContent = 'Fault Status: No Fault';
            faultBox.style.backgroundColor = '#e0d5ff';
          }
        });
    }

    function toggleMotorState() {
      motorState = !motorState;
      motorStateText.textContent = motorState ? "ON" : "OFF";
      motorSwitch.classList.toggle('off', !motorState);
      updateFirebase(motorState);
    }

    backBtn.addEventListener('click', () => {
      window.location.href = 'index.html';
    });

    motorSwitch.addEventListener('click', toggleMotorState);

    getFaultStatus();
    setInterval(getFaultStatus, 5000);
  </script>
</body>
</html>

--------------------------------------------------------------------------------------------------
ML model code
--------------------------------------------------------------------------------------------------

from google.colab import files
uploaded = files.upload()  # This will prompt you to upload files
import firebase_admin
from firebase_admin import credentials, db
import tensorflow as tf
import numpy as np
import time

# 🔹 Load Firebase credentials (replace with your actual file path)
cred = credentials.Certificate("/content/drive/MyDrive/predictive-maintenance-ee697-firebase-adminsdk-fbsvc-4c24d2b6b5.json")

# 🔹 Initialize Firebase only if it's not already initialized
try:
    firebase_admin.get_app()
except ValueError:
    firebase_admin.initialize_app(cred, {'databaseURL': 'https://predictive-maintenance-ee697-default-rtdb.asia-southeast1.firebasedatabase.app/'})

# 🔹 Load the trained model
model = tf.keras.models.load_model("/content/drive/MyDrive/Colab Notebooks/ip_ml_model/motor_fault_model.h5")

# 🔹 Firebase references
sensor_ref = db.reference("/Sensor")
prediction_ref = db.reference("/Prediction")
fault_name_ref = db.reference("/FaultName")  # New node for fault name

print("✅ Listening for sensor data...")

# 🔹 Function to process sensor data and update Firebase
def process_and_update():
    sensor_data = sensor_ref.get()

    if sensor_data:
        try:
            # Read raw sensor values (without modification for model input)
            vibration = float(sensor_data["Vibration"])
            current = float(sensor_data["Current"])
            temperature = float(sensor_data["Temperature"])

            # Reshape input for prediction
            input_data = np.array([[vibration, current, temperature]])

            # Get prediction from the model
            prediction = model.predict(input_data)[0][0]  # Assuming binary classification (0: Good, 1: Faulty)

            # Use absolute values for fault detection logic
            abs_vibration = abs(vibration)
            abs_current = abs(current)

            fault_name = "Good Condition"  # Default: No fault

            if prediction > 0.5:
                if abs_current > 0.35 and abs_vibration > 2.5 and temperature > 45:
                    fault_name = "Overload, Bearing, and High Temperature"
                elif abs_current > 0.35 and abs_vibration > 2.5:
                    fault_name = "Overload and Bearing"
                elif abs_vibration > 2.5 and temperature > 45:
                    fault_name = "Bearing and High Temperature"
                elif abs_current > 0.35 and temperature > 45:
                    fault_name = "Overload and High Temperature"
                elif abs_current > 0.35:
                    fault_name = "Overload"
                elif abs_vibration > 2.5:
                    fault_name = "Bearing Issue"
                elif temperature > 45:
                    fault_name = "High Temperature"

            # Save prediction and fault name to Firebase
            prediction_ref.set({"Fault": int(prediction > 0.5)})
            fault_name_ref.set({"Name": fault_name})

            print(f"🔹 Sensor Data: Vibration={vibration}, Current={current}, Temperature={temperature}")
            print(f"🚨 Fault Detected: {fault_name}")
            print(f"✅ Prediction Updated: {'Faulty' if prediction > 0.5 else 'Good'}, Fault Name: {fault_name}")

        except Exception as e:
            print(f"❌ Error processing data: {e}")

# 🔹 Real-time listener function
def listener(event):
    print("📡 New sensor data detected! Processing...")
    process_and_update()

# 🔹 Attach listener to the sensor data node
sensor_ref.listen(listener)

# 🔹 Keep the script running
while True:
    time.sleep(10)  # Adjust based on how frequently your data updates

--------------------------------------------------------------------------------------------------

		A work of 6 months 4 members

